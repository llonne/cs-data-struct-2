Discussion Questions


Make a new file and add your answers to the questions below. Push the file to your github repository along with the other solutions.


Recursion

In your own words, what is recursion?

- A function that calls itself.

Why is it necessary to have a base case?

- So it does not run infinitely.


Graphs

What is a graph?

- CS data structure used to handle complex many to many relationships.

How is a graph different from a tree?

- It can have multiple connections possible between nodes, and connections can go in multiple directions.

Give an example of something that would be good to model with a graph.

- A social network



Performance of Different Data Structures

Fill in the missing spots in the chart with the correct runtimes. Do this by reasoning through how the data structures work, NOT by looking up the solution. Add-R means add to the right/end/top and Add-L means add to the left/beginning/bottom. There are X’s in the spots where that operation doesn’t make sense for that data structure (for instance, you can’t index a stack, or pop from the end of a queue). We’ve provided the first few answers for you.

Fill in the runtimes for the following actions for the table below:

Data Structure          Index   Search  Add-R   Add-L   Pop-L   Pop-R
Python List (Array)     O(1)    O(n)    O(1)    O(n)    O(n)    O(1)
Linked List             O(n)    O(n)    O(1)    O(1)    O(1)    O(n)
Doubly-Linked List      O(n)    O(n)    O(1)    O(1)    O(1)    O(1)
Queue (as Array)        X       X       O(1)    X       O(n)    X
Queue (as LL or DLL)    X       X       O(1)    X       O(1)    X
Stack (as Array, LL, or DLL)X   X       O(1)    X       X       O(1)
Deque (as DLL)          X       X       O(1)    O(1)    O(1)    O(1)

Index: Find an item in the structure when you know its position
Search: Find an item in the structure when you know its data
Add(R/L): Set a key in set/dictionary or add node to tree
Pop(R/L): Remove a key or node


Fill in Runtime and Memory:

The answers for dictionary have been provided; you should fill in the rest:

Data Structure          Get     Add             Delete  Iterate Memory
Dictionary (Hash Map)   O(1)    O(1)            O(1)    O(n)    medium
Set (Hash Map)          O(1)    O(1)            O(1)    O(n)    medium
Binary Search Tree  O(log n)    O(log n)    O(log n)    O(1)    a little
Tree                    O(n)    O(1)            O(1)    O(1)    a little         

Get: Find an item in the structure
Add: Set a key in set/dictionary or add node to tree
Delete: Remove a key or node
Iterate: Find next item in data structure
Memory: Relative to data, how much memory is used? (Choices: a little, medium, or a lot)



Sorting

Describe in words how the Bubble Sort algorithm works.

- Iterate through the list from the beginning, comparing 2 items at a time, swapping to ascending order. Repeat iteations until entirelist is sorted.


Describe in words how the Merge Sort algorithm works.

- Take 2 separate lists of numbers, recursively half them until there are only single items, then reverse and put the items in sorted pairs in a new list until everything is in order in the new list.


Describe in words how the Quick Sort algorithm works. 

- Choose an element near the middle of a list. Sort all other items so everything smaller is on the left, and everything larger is on the right. then choose an item near the center of the right, and another item near the center of the left. Repeat the procedure until the whole list is sorted.
